
DESIGN PATTERN

(occhio alle regole!! sono quelle che costituiscono il design pattern)

sono stili di creazione di classi



Prima categoria: Design pattern CREAZIONALI (GOF) (danno caratteristiche sulla creazione di oggetti)

categorie:

1. SINGLETON -> MI IMPEDISCE DI CREARE PIU' ISTANZE DI UNA CLASSE

(molto usati anche dal framework di sviluppo Java 'Spring')

Cliente c = new Cliente(...);

spesso si vuole controllare che venga generata una sola istanza di una classe

Esempio
 abbiamo una connessione

Connection c = DBAccess.getConnection();

il metodo che ho implementato, getConnection(), deve essere richiamato una sola volta nel codice!!! chiamarlo più di una volta creerebbe uno stallo,
bloccando la lettura e lo stream con il database relazionale


Altro Esempio

abbiamo un numero che è generato da una classe

double v = Classe.generaValore();

controllare che venga generata un'istanza della classe alla volta per generare il valore v univocamente??


USO I SINGLETON

REGOLA: se voglio implementare un singleton,
bisogna creare all'interno della classe
un campo d'istanza che fa riferimento alla classe stessa,
tale campo dev'essere per forza statico
questa istanza controlla bene il numero di classi che sono state create

2° REGOLA: bisogna inserire un costruttore privato nella classe
(quindi non posso fare l'istanza della classe)

3° REGOLA: creare un metodo statico che ritorna come tipologia 
l'oggetto classe, in genere chiamato getInstance() {}
(lo userò al posto del 'new' per creare l'istanza)





2. PROTOTYPE -> MI PERMETTE DI COPIARE UN OGGETTO

Cliente c1 = new Cliente("Massimo", ...);

posso scrivere 

Cliente copiac1 = c1    ?

c1 è la reference, cioè il nome del puntatore che fa riferimento all'indirizzo di memoria in cui è salvato l'oggetto.

quindi sì, posso scriverlo, ma copiac1 e c1 sono una reference allo stesso oggetto (modificando uno modifico anche l'altro).

Il prototype serve per copiare gli oggetti. è anch'esso un Design Pattern Creazionale

1° una classe può essere copiata se implementa l'interfaccia Cloneable.

2° devo poi sovrascrivere il metodo clone() di Cloneable
che faccia la copia bit a bit dell'oggetto.



il clone() di Object è protected, poiché così è impossibile clonare oggetti se non specifico un Override di clone() in quella classe
( il metodo clone() della super class Object non è visibile in una classe che creo e che estende Object )

infatti se creassi un oggetto x,
x.clone() mi restituirebbe probabilmente un tipo che non so gestire, a meno di fare un casting (che magari non saprei fare)

NB nel momento eredito posso cambiare il modificatore di accesso di un metodo a uno meno restrittivo
ma non posso farlo più restrittivo, perché toglierei funzionalità alla classe, che invece deve averne
tante quante o più rispetto alla super

nello specifico clone() è protected su Object, nella classe ereditaria posso metterlo public, ma non default o private



FACTORY		molto usato ->  MI PERMETTE DI RICHIAMARE METODI SENZA ISTANZIARE L'OGGETTO
lo fa anche in automatico Eclipse con Refactor -> Generate Factory

ecco un metodo che prende dati da un impiegato e li scrive in un database relazionale:

public class impiegatoDAO{
	public void create(Impiegato i) {
		
	}
}

poi implemento come

ImpiegatoDAO iDAO = new ImpiegatoDAO(); // questa riga è inutile

iDAO.create(imp);


il factory nasconde l'implementazione della classe istanziata inserendo un metodo create() all'interno della classe di business,
metodo che genera l'istanza evitando di creare l'oggetto


non serve più il reference della classe per poter richiamare i metodi!
così non devo allocare in memoria degli oggetti che non mi servono a niente.
mi viene restituita un'istanza anonima dell'elemento che devo utilizzare per fare una chiamata a un metodo



FACTORY METHOD (variante del factory)

se passo un parametro variabile nel metodo getFactory
questo sarà usato nel metodo per decidere come istanziare l'oggetto
quindi anche il costruttore dovrà prendere questo parametro


NOTA BENE se un metodo di una classe è statico posso chiamarlo senza istanziare la classe
e senza fare una factory


altri:


LAZY LOADING

INITIALIZAZION

BUILDER

li faremo



DESIGN PATTERN STRUTTURALI

danno regole su come disporre i componenti dentro un'applicazione


FACCIATA -> raggruppo varie classi per poterne chiamare i metodi istanziando una sola classe!!


bisogna tener conto dei tre livelli di un'applicazione


Presentation Layer (HTML/XHTML, JSP, JSF, JS...)

	(Controller, componente Java che comunica i dati tra PL e BL)
----------------------------------------------
Business Logic
	elabora i dati
	qui possono esserci veramente tante classi
	un file XML li deve passare al Controller, ma questo file è tanto più complesso
	quanti sono i file.
----------------------------------------------
	(DAO, livello di DL che riceve i dati e li trasmette al database)
Data Layer 


al posto del file XML creo un componente di mappatura al livello business, detto FACCIATA,
che fa una chiamata a tutti i componenti business che stanno sotto.

FACCIATA = punto d'ingresso dei dati che arrivano tramite il controller, una specie di imbuto per i dati
in modo che il Presentation Layer debba richiamare un unico componente, la facciata.

sto solo raggruppando tutti i componenti di business in un solo.





COMPONENTI BUSINESS ARCHITETTURALI

DAO
gestisce il data layer

MODEL VIEW CONTROLLER
o MVC (gestisce il PC e il BL, componenti essenziali dell'applicazione (il data layer può anche non esserci)

design pattern, che si trova dove si ha un'interfaccia grafica e componenti business che gestiscono la logica

cos'è la VISTA? non va confusa col presentation layer

tutto ciò che l'utente VEDE è presentation layer 

non tutti i componenti del PL sono delle viste. la VISTA (VIEW) è
un componente che contiene un'intercettatore (detto listener) di eventi in grado di catturare dei dati da processare nella business logic

quindi la VISTA sono le componenti che effettivamente interagiscono con l'utente

è fondamentale che una vista abbia un listener, altrimenti non è una vista

il controller è listener vero e proprio, che viene posizionato all'interno del presentation layer

il modello è il controllore che passa dati dalla pagina web e li passa alle classi di business logic

-----------------------------------------------------

esempio di logica del pattern MVC

JButton bottone = new JButton ();    ->    view

la vista per funzionare ha bisogno di un controllore
c'è sempre un metodo che lo aggiunge:

bottone.addActionListener(new GestioneEvento())		//aggiungo il controllore

tale metodo è necessario che riceva come argomento l'istanza di una classe
che implementa un interfaccia di gestione dell'evento specifico di un componente
(ogni componente vista ha una interfaccia che contiene tutti i metodi per gestire gli eventi possibili)
--------------
detto in altre parole

public class GestioneEvento implements ActionListener {
		//(ActionListener è l'interfaccia di gestione dell'evento sul bottone)
		//come interfaccia ha dentro dei prototipi da implementare
	public void actionPerformed( ActionEvent event ) {
		[ 
		  azioni da fare nel momento in cui viene premuto il bottone 
		  questa parte detta MODELLO
		  ossia dati elaborati dal metodo di business richiamato dal controllore chiamato nella riga precedente
		  bottone.addActionListener(new GestioneEvento())
		]
	}
}


UN ALTRO ESEMPIO


creo una finestra Java, detta JFrame

JFrame frame = new JFrame();  		//  finora c'è il PC ma non la view (non "ascolta" gli eventi, cioè l'input)

frame.addWindowListener(new gestioneEvento());
...
public class GestioneEvento implements WindowListener {
	...
}


NOTA BENE anche il concetto di 'classe interna' vs. 'classe interna anonima'
classe interna: viene definita all'interno di un'altra

public class C {
	private int i;
	private int x;

	private Class A {
		// con private nascondo completamente questa classe A
		// se A viene utilizzato solo ed esclusivamente da C
		A a = new A();
		a.metodo();
	}
}


potrei quindi fare ad es

private class Gestione Evento Implements ActionListener{}

all'interno della classe bottone

alcune funzionalità possono essere richiamate da più componenti Listener

ma se un bottone usa un SOLO listener, posso usare una classe interna anonima

l'esempio del bottone di prima diventa


JButton bottone = new JButton ();    ->    view

bottone.addActionListener( new ActionListener() {
	public void actionPerformed( ActionEvent event ) {
		...
	});
new ActionListener() {} NON è l'istanza di un'interfaccia (che non si può istanziare!!) ma l'istanza di una
nuova classe INTERNA ANONIMA che realizza quell'interfaccia
(interna poiché è interna, anonima poiché non creiamo l'istanza della classe ma usiamo solo il suo metodo)

è esattamente ciò che faccio quando faccio

System.out.println(new Date());

ho insomma DEFINITO UNA CLASSE ALL'INTERNO DI UN METODO 
(istanza anonima di classe)



se invece il bottone ha VARI eventi da implementare,

supponiamo però che io voglio sovrascrivere solo UNO degli eventi, gli altri li lascio non implementati
in realtà questa non è buona programmazione, perché mi lascia dei metodi che posso usare che non fanno niente
-> altro design pattern:


ADAPTER
adattatore tra l'interfaccia, e la classe che deve utilizzare tale interfaccia
per evitare che una classe deva sovrascrivere tutti i numerosi metodi dell'interfaccia
si crea un adapter che li implementa tutti rendendoli reali
(NON implementati, ma resi reali cioè gli tolgo l'abstract e gli metto le graffe)
la classe estenderà questo adapter

Interfaccia -> 7 prototipi
Adapter -> 7 reali (NON implementati)
Classe -> extends Adapter -> prendo solo i metodi che voglio, tipo 5

L'adattatore non deve essere istanziato!! perché ha metodi non implementati
per questo l'adattatore è sempre definito come abstract.

L'adapter è molto usato nell'API di Java, ad es. esiste già per il WindowListener
per il quale esiste un WindowAdapter, classe astratta che implementa l'interfaccia WindowListener
sovrascrive gli elementi dell'interfaccia, non li implementa ma li fa diventare reali

quindi posso fare 

public class GestioneEvento extends WindowAdapter {}
(invece che implements WindowListener)
